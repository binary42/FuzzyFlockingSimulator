FUNCTION_BLOCK repulsion

VAR_INPUT
	rep_distance	: 			REAL;
	rep_position	:			REAL;
END_VAR

VAR_OUTPUT
	rep_flight_direction	:	REAL;
	rep_flight_speed		:	REAL;
END_VAR

FUZZIFY rep_distance	// Percent of visual range
	TERM too_close		:=		( 0 ,1 ) ( 80, 0 );		
	TERM far_enough		:=		( 0, 0) ( 50, 1 );		
END_FUZZIFY

FUZZIFY rep_position	// Perceived neighbor's angular offset in degrees
	TERM behind				:=		( -180, 1 ) ( 0, 0 ) ( 180, 1 );
	TERM in_front_or_left 	:=		( -180, 0 ) ( 0, 1 ) ( 0, 0 );
	TERM in_front_or_right 	:= 		( -180, 0 ) ( 0, 0 ) ( 0, 1 ) ( 180, 0 );
END_FUZZIFY

DEFUZZIFY rep_flight_direction	// Needed change of direction in degrees
	TERM turn_left			:=		trian -360 -180 0;
	TERM keep_direction		:=		trian -180 0 180;
	TERM turn_right			:=		trian 0 180 360;
	
	METHOD	: COG;
	DEFAULT	:= 0;
END_DEFUZZIFY

DEFUZZIFY rep_flight_speed		//Needed change of speed in % max speed
	TERM decelerate			:= trian -200 -50 0;
	TERM keep_speed			:= trian -100 0 100;
	TERM accelerate			:= trian 0 100 200;
	
	METHOD	: COG;
	DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK repulsion_rules
	AND	: MIN;			// Use min for and
 	ACT	: MIN;			// Use min activation method
	ACCU : MAX;			// Use max accumulation method
	
	RULE 1 : IF rep_distance IS far_enough THEN rep_flight_direction IS keep_direction;
	RULE 2 : IF rep_distance IS too_close THEN rep_flight_direction IS keep_direction;
	RULE 3 : IF rep_distance IS far_enough THEN rep_flight_speed IS keep_speed;
	RULE 4 : IF rep_distance IS too_close THEN rep_flight_speed IS keep_speed;
	RULE 5 : IF rep_distance IS too_close AND rep_position IS behind THEN rep_flight_speed IS accelerate;
	RULE 6 : IF rep_distance IS too_close AND rep_position IS in_front_or_left THEN rep_flight_direction IS turn_right;
	RULE 7 : IF rep_distance IS too_close AND rep_position IS in_front_or_left THEN rep_flight_speed IS decelerate;
	RULE 8 : IF rep_distance IS too_close AND rep_position IS in_front_or_right THEN rep_flight_direction IS turn_left;
	RULE 9 : IF rep_distance IS too_close AND rep_position IS in_front_or_right THEN rep_flight_speed IS decelerate;
END_RULEBLOCK

END_FUNCTION_BLOCK
/*from ilb_phd05a.pdf
 * 	the repulsion fuzzy rule base can be used
	to model the fuzzy animatâ€™s repulsion drive. In other words, for each of the perceived
	neighbours the fuzzy animat applies fuzzy logic on each of the rules from the repulsion
	fuzzy rule base and works out the uncertain action that should be taken to keep away
	from colliding with any of the perceived neighbours
 */